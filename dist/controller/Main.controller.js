sap.ui.define(["sap/ui/core/mvc/Controller","sap/ui/core/Fragment","sap/m/MessageToast","hds/ui5/todolistadvance/util/formatter"],(e,t,i,s)=>{"use strict";return e.extend("hds.ui5.todolistadvance.controller.View1",{onInit(){},formatter:s,onTaskSubmit(){this.addTaskDialogBoxHandler()},inputTaskLiveChange(e){const t=this.getView().byId("idInputTaskDescription");const i=this.getView().byId("idDatePickerInputTask");const s=this.getView().byId("idPriorityInputTask");const a=this.getView().byId("idCategoryInputTask");const o=e.getParameter("id");const n=e.getParameter("selectedItem")?.getId();if(o?.includes("idInputTaskDescription")){const i=e.getParameter("value")?.trim()?.length>0;const s=t.getValueState()==="Error";if(s&&i)t.setValueState("None")}if(o?.includes("idDatePickerInputTask")){const t=e.getParameter("value")?.length>0;const s=i.getValueState()==="Error";if(s&&t)i.setValueState("None")}if(n?.includes("idPriorityInputTask")){const t=e.getParameter("selectedItem").getKey();const i=s.getValueState()==="Error";if(i&&t)s.setValueState("None")}if(n?.includes("idCategoryInputTask")){const t=e.getParameter("selectedItem").getKey();const i=a.getValueState()==="Error";if(i&&t)a.setValueState("None")}},openAddTaskDialog({isEditMode:e=false}={}){this.getView().getModel().setProperty("/isEditMode",e);if(!this.pDialog){this.pDialog=this.loadFragment({name:"hds.ui5.todolistadvance.view.fragment.TaskDetailsDialog"})}this.pDialog.then(e=>e.open())},addTaskDialogBoxHandler(){const e=this.getView().byId("idInputTaskDescription").getValue();const t=this.getView().byId("idDatePickerInputTask").getValue();const s=this.getView().byId("idPriorityInputTask").getSelectedItem().getText();const a=this.getView().byId("idCategoryInputTask").getSelectedItem().getText();const o=this.getView().getModel().getProperty("/isEditMode");function n(e){const t=o?e.idCurrentSelectedTask:(new Date).getTime().toString();return t}const r={id:n(this),title:e,priority:s,dueDate:t,category:a,Status:"Pending"};const d=this.validateTaskInputDetails();if(d){i.show("Please provide missing details",{width:"250px"});return}const l=this.getView().getModel();const g=l.getProperty("/tasks")||[];if(o){const e=g.map(e=>e.id===this.idCurrentSelectedTask?r:e);l.setProperty("/tasks",[...e])}else{l.setProperty("/tasks",[...g,r])}this.resetInputTasksFields();this.byId("idDialogMain").close()},validateTaskInputDetails(){const e=this.getView().byId("idInputTaskDescription");const t=this.getView().byId("idDatePickerInputTask");const i=this.getView().byId("idPriorityInputTask");const s=this.getView().byId("idCategoryInputTask");const a=e.getValue().trim();const o=t.getValue();const n=i.getSelectedKey();const r=s.getSelectedKey();let d=false;if(!a){d=true;e.setValueState("Error")}if(!o){d=true;t.setValueState("Error")}if(!n){d=true;i.setValueState("Error")}if(!r){d=true;s.setValueState("Error")}return d},resetInputTasksFields(){const e=this.getView().byId("idInputTaskDescription");const t=this.getView().byId("idDatePickerInputTask");const i=this.getView().byId("idPriorityInputTask");const s=this.getView().byId("idCategoryInputTask");e.setValue("");e.setValueState("None");e.setValueStateText(null);t.setValue(null);t.setValueState("None");i.setSelectedKey("");i.setValueState("None");s.setSelectedKey("");s.setValueState("None")},cancelTaskDialogBoxHandler(){this.resetInputTasksFields();this.byId("idDialogMain").close()},getConfirmationDeleteTask(){if(!this.deleteTaskDialog){this.deleteTaskDialog=this.loadFragment({name:"hds.ui5.todolistadvance.view.fragment.TaskDeleteConfirmation"})}this.deleteTaskDialog.then(e=>e.open())},closeDialogDeleteTask(){this.byId("idDialogDeleteTaskConfirmation").close()},proceedTaskDelete(){const e=this.getView().getModel();const t=e.getProperty("/tasks")||[];const i=t.filter(e=>e.id!==this.idSelectedTaskForDeletion);e.setProperty("/tasks",i);this.closeDialogDeleteTask()},deleteTaskHandler(e){const{id:t}=e.getSource().getBindingContext().getObject();this.idSelectedTaskForDeletion=t;this.getConfirmationDeleteTask()},editTaskHandler(e){this.openAddTaskDialog({isEditMode:true});this.populateTaskDetailsInDialogBox(e)},populateTaskDetailsInDialogBox(e){const{id:t,title:i,priority:s,dueDate:a,category:o}=e.getSource().getBindingContext().getObject();this.idCurrentSelectedTask=t;this.getView().byId("idDatePickerInputTask").setDateValue(new Date(a));this.getView().byId("idInputTaskDescription").setValue(i);this.getView().byId("idPriorityInputTask").setSelectedKey(s.toUpperCase());this.getView().byId("idCategoryInputTask").setSelectedKey(o.toUpperCase())},markCompleteteTaskHandler(e){const{id:t}=e.getSource().getBindingContext().getObject();const i=this.getView().getModel();const s=i.getProperty("/tasks")||[];const a=s.map(e=>e.id===t?{...e,Status:"Completed"}:e);i.setProperty("/tasks",a)}})});
//# sourceMappingURL=Main.controller.js.map